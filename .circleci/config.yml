commands:
    bump-branch-version:
        description: Bump package version via a git commit
        steps:
            - run:
                command: .circleci/scripts/bump-version.sh "$GITHUB_PR_BASE_BRANCH" "$CIRCLE_BRANCH"
                name: Bump package version
    cancel-job:
        description: Cancel the current job based on an environment variable
        parameters:
            method:
                default: cancel
                description: |
                    Method of cancellation; Either cancel the job or just halt the step so the job
                    still succeeds
                enum:
                    - cancel
                    - halt
                type: enum
        steps:
            - run:
                command: |
                    echo "CANCEL_JOB=$CANCEL_JOB"
                    [[ -z "$CANCEL_JOB" ]] && exit 0
                    set -e
                    if [[ "<< parameters.method >>" == "cancel" ]]; then
                      OUTPUT=$(
                        curl \
                          --user "${CIRCLE_API_USER_TOKEN}:" \
                          -X POST \
                          --max-time 60 \
                          --connect-timeout 60 \
                          "https://circleci.com/api/v1.1/project/github/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BUILD_NUM}/cancel")
                      echo "$OUTPUT"
                      STATUS="$(echo "$OUTPUT" | jq -r .status -)"
                      if [[ "$STATUS" == 'canceled' ]]; then
                        # This means the job was cancelled but for some reason the current script is
                        # still running. Wait a few seconds to let it catch up then fail the job to
                        # prevent downstream jobs from running unintentionally.
                        sleep 10
                        exit 1
                      fi
                      echo "Failed to cancel job"
                      exit 1
                    elif [[ "<< parameters.method >>" == "halt" ]]; then
                      # Halt the job and mark it as successful
                      circleci step halt
                    else
                      echo "Unknown cancel method: << parameters.method >>"
                      exit 1
                    fi
                name: Cancel the job
    conditional-cancel:
        description: Cancel the current job based on various conditions
        parameters:
            cancel_if_paths_changed:
                default: ""
                description: Cancel the job if these file paths did change (space-separated list)
                type: string
            cancel_if_tag_in_commit:
                default: ""
                description: Cancel the job if this tag is in the current commit message
                type: string
            cancel_if_tag_in_pr_title:
                default: ""
                description: Cancel the job if this tag is in the pull request title
                type: string
            cancel_only_if_all_paths_changed_match_pattern:
                default: ""
                description: Cancel the job if the only files changed match this pattern (grep regex)
                type: string
            gitref:
                default: $CIRCLE_BRANCH
                type: string
            method:
                default: cancel
                description: |
                    Method of cancellation; Either cancel the job or just halt the step so the job
                    still succeeds
                enum:
                    - cancel
                    - halt
                type: enum
            run_if_paths_changed:
                default: ""
                description: Cancel the job if these file paths did not change (space-separated list)
                type: string
            run_if_tag_in_commit:
                default: ""
                description: Cancel the job if this tag is not in the current commit message
                type: string
            run_only_if_all_paths_changed_match_pattern:
                default: ""
                description: Cancel the job if any files changed besides the ones matched by this pattern (grep regex)
                type: string
        steps:
            - run:
                command: |
                    COMMIT_RANGE="origin/master..origin/<< parameters.gitref >>"
                    echo "export COMMIT_RANGE=\"$COMMIT_RANGE\"" >> $BASH_ENV
                    echo $COMMIT_RANGE
                name: Set git diff commit range
            - when:
                condition: << parameters.run_if_tag_in_commit >>
                steps:
                    - run:
                        command: |
                            shopt -s nocasematch
                            MESSAGE="$(git log -1 --pretty=%B)"
                            if [[ "$MESSAGE" != *'<< parameters.run_if_tag_in_commit >>'* ]]; then
                              echo 'export CANCEL_JOB=1' >> $BASH_ENV
                            fi
                            shopt -u nocasematch
                        name: |
                            Cancel the job if << parameters.run_if_tag_in_commit >> is not in the current
                            commit message (case insensitive)
            - when:
                condition: << parameters.cancel_if_tag_in_commit >>
                steps:
                    - run:
                        command: |
                            shopt -s nocasematch
                            MESSAGE="$(git log -1 --pretty=%B)"
                            if [[ "$MESSAGE" == *'<< parameters.cancel_if_tag_in_commit >>'* ]]; then
                              echo 'export CANCEL_JOB=1' >> $BASH_ENV
                            fi
                            shopt -u nocasematch
                        name: |
                            Cancel the job if << parameters.cancel_if_tag_in_commit >> is in the current
                            commit message (case insensitive)
            - when:
                condition: << parameters.cancel_if_tag_in_pr_title >>
                steps:
                    - run:
                        command: |
                            shopt -s nocasematch
                            PR_NUMBER="$(echo "$CIRCLE_PULL_REQUEST" | sed 's/.*\/pull\///')"
                            URL="https://api.github.com/repos/NarrativeScience/talos/pulls/$PR_NUMBER"
                            PR_TITLE="$(curl --user "$GITHUB_USERNAME:$GITHUB_PASSWORD" "$URL" | jq '.title')"
                            if [[ "$PR_TITLE" == *'<< parameters.cancel_if_tag_in_pr_title >>'* ]]; then
                              echo 'export CANCEL_JOB=1' >> $BASH_ENV
                            fi
                            shopt -u nocasematch
                        name: |
                            Cancel the job if << parameters.cancel_if_tag_in_pr_title >> is in the pull request
                            title (case insensitive)
            - when:
                condition: << parameters.run_if_paths_changed >>
                steps:
                    - run:
                        command: |
                            FILES="$(git diff --name-only $COMMIT_RANGE << parameters.run_if_paths_changed >>)"
                            if [[ ${#FILES} -eq 0 ]]; then
                              echo 'export CANCEL_JOB=1' >> $BASH_ENV
                            fi
                        name: Cancel the job if << parameters.run_if_paths_changed >> did not change
            - when:
                condition: << parameters.run_only_if_all_paths_changed_match_pattern >>
                steps:
                    - run:
                        command: |
                            GREP_PATTERN="<< parameters.run_only_if_all_paths_changed_match_pattern >>"
                            FILES="$(git --no-pager diff --name-only $COMMIT_RANGE)"
                            if [[ ${#FILES} -gt 0 ]]; then
                              FILTERED_FILES=$(echo "$FILES" | grep "$GREP_PATTERN") || true
                              if [[ "$FILES" != "$FILTERED_FILES" ]]; then
                                echo 'export CANCEL_JOB=1' >> $BASH_ENV
                              fi
                            fi
                        name: Cancel the job if any files beside << parameters.run_only_if_all_paths_changed_match_pattern >> changed
            - when:
                condition: << parameters.cancel_if_paths_changed >>
                steps:
                    - run:
                        command: |
                            FILES="$(git diff --name-only $COMMIT_RANGE << parameters.cancel_if_paths_changed >>)"
                            if [[ ${#FILES} -gt 0 ]]; then
                              echo 'export CANCEL_JOB=1' >> $BASH_ENV
                            fi
                        name: Cancel the job if << parameters.cancel_if_paths_changed >> did change
            - when:
                condition: << parameters.cancel_only_if_all_paths_changed_match_pattern >>
                steps:
                    - run:
                        command: |
                            GREP_PATTERN="<< parameters.cancel_only_if_all_paths_changed_match_pattern >>"
                            FILES="$(git --no-pager diff --name-only $COMMIT_RANGE)"
                            if [[ ${#FILES} -gt 0 ]]; then
                              FILTERED_FILES=$(echo "$FILES" | grep -E "$GREP_PATTERN") || true
                              if [[ "$FILES" == "$FILTERED_FILES" ]]; then
                                echo 'export CANCEL_JOB=1' >> $BASH_ENV
                              fi
                            fi
                        name: Cancel the job if the only files changed match << parameters.cancel_only_if_all_paths_changed_match_pattern >>
            - cancel-job:
                method: << parameters.method >>
    github-release:
        description: Create a github release via the github CLI
        steps:
            - github-cli/setup
            - run:
                command: |
                    version="$(poetry version -s)"
                    notes="$(git show -s --format=%B HEAD)"
                    gh release create "v${version}" --title "Version ${version}" --notes "$notes"
                name: Create GitHub Release
    poetry-configure:
        description: Configure Poetry
        steps:
            - run:
                command: |
                    pip install -U pip setuptools
                    pip install poetry
                    poetry config pypi-token.pypi "$POETRY_PYPI_TOKEN_PYPI"
                name: Configure Poetry
executors:
    default:
        docker:
            - image: cimg/python:3.6
        resource_class: small
    python-3_6-medium:
        docker:
            - environment:
                DB_USER_NAME: postgres
                DB_USER_PASSWORD: $CIRCLE_SHA1
                EXISTING_DB_NAME: circle_test
                TEST_DB_NAME: test_db
              image: cimg/python:3.6
            - environment:
                POSTGRES_PASSWORD: $CIRCLE_SHA1
                POSTGRES_USER: postgres
              image: circleci/postgres:11-alpine-ram
        resource_class: medium
    python-3_9-medium:
        docker:
            - environment:
                DB_USER_NAME: postgres
                DB_USER_PASSWORD: $CIRCLE_SHA1
                EXISTING_DB_NAME: circle_test
                TEST_DB_NAME: test_db
              image: cimg/python:3.9
            - environment:
                POSTGRES_PASSWORD: $CIRCLE_SHA1
                POSTGRES_USER: postgres
              image: circleci/postgres:11-alpine-ram
        resource_class: medium
jobs:
    build-test-3_6:
        description: Test building with Poetry, Cruft, pre-commit, and run unit tests with pytest.
        executor: python-3_6-medium
        steps:
            - add_ssh_keys:
                fingerprints:
                    - cb:4c:e2:f4:c2:be:b7:c0:1a:02:1b:13:15:e0:a4:1b
            - ghpr/build-prospective-branch
            - aws-cli/install
            - circleci-cli/install
            - poetry-configure
            - bump-branch-version
            - run:
                command: poetry install
                name: Install dependencies
            - run:
                command: poetry build
                name: Build artifact with Poetry
            - run:
                command: poetry run cruft check
                name: Cruft check
            - run:
                command: |
                    poetry run pre-commit install
                    poetry run pre-commit run \
                      --source "origin/${GITHUB_PR_BASE_BRANCH}" \
                      --origin "origin/${CIRCLE_BRANCH}" \
                      --show-diff-on-failure
                name: Run commit hooks
            - run: poetry run pytest --junit-xml .junit/unit/results.xml
            - store_test_results:
                path: .junit
            - ghpr/post-pr-comment:
                comment: Tests failed!
                when: on_fail
    build-test-3_9:
        description: Test building with Poetry, Cruft, pre-commit, and run unit tests with pytest.
        executor: python-3_9-medium
        steps:
            - add_ssh_keys:
                fingerprints:
                    - cb:4c:e2:f4:c2:be:b7:c0:1a:02:1b:13:15:e0:a4:1b
            - ghpr/build-prospective-branch
            - aws-cli/install
            - circleci-cli/install
            - poetry-configure
            - bump-branch-version
            - run:
                command: poetry install
                name: Install dependencies
            - run:
                command: poetry build
                name: Build artifact with Poetry
            - run:
                command: poetry run cruft check
                name: Cruft check
            - run:
                command: |
                    poetry run pre-commit install
                    poetry run pre-commit run \
                      --source "origin/${GITHUB_PR_BASE_BRANCH}" \
                      --origin "origin/${CIRCLE_BRANCH}" \
                      --show-diff-on-failure
                name: Run commit hooks
            - run: poetry run pytest --junit-xml .junit/unit/results.xml
            - store_test_results:
                path: .junit
            - ghpr/post-pr-comment:
                comment: Tests failed!
                when: on_fail
    poetry-publish:
        description: Publish a release of the project
        executor: default
        steps:
            - aws-cli/install
            - checkout
            - conditional-cancel:
                cancel_if_tag_in_commit: '[skip publish]'
            - poetry-configure
            - run: poetry install
            - run: poetry build
            - run: poetry publish
orbs:
    aws-cli: circleci/aws-cli@2.0.3
    circleci-cli: circleci/circleci-cli@0.1.9
    ghpr: narrativescience/ghpr@1.1.2
    github-cli: circleci/github-cli@1.0.3
scripts: {}
version: 2.1
workflows:
    publish:
        jobs:
            - poetry-publish:
                context: opensource
                filters:
                    branches:
                        ignore: /.*/
                    tags:
                        only: /v[0-9]+(\.[0-9]+)*/
    pull-request-tests:
        jobs:
            - build-test-3_6:
                context: opensource
                filters:
                    branches:
                        ignore:
                            - main
            - build-test-3_9:
                context: opensource
                filters:
                    branches:
                        ignore:
                            - main

